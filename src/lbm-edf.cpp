#include "lbm.hpp"
#include "math_util.hpp"
#include <omp.h>
#include "units.hpp"
#include "cantera.hpp"

double LBM::calculate_feq(int l, double rho, double velocity[], double theta, double corr[])
{
    double eps = 0.0;
    double P = 0.0;
    double feq = rho;

        eps = velocity[0];
        P = theta + sq(velocity[0]) + corr[0];
        if (cx[l] == 0) feq *= (1 - P);
        else if (cx[l] == 1) feq *= (eps+P)/2;
        else if (cx[l] == -1) feq*= (-eps+P)/2;
    
    #if NDIM == 2 || NDIM == 3
        eps = velocity[1];
        P = theta + sq(velocity[1]) + corr[1];;
        if (cy[l] == 0) feq *= (1 - P);
        else if (cy[l] == 1) feq *= (eps+P)/2;
        else if (cy[l] == -1) feq*= (-eps+P)/2;
    #endif

    #if NDIM == 3
        eps = velocity[2];
        P = theta + sq(velocity[2]) + corr[2];
        if (cz[l] == 0) feq *= (1 - P);
        else if (cz[l] == 1) feq *= (eps+P)/2;
        else if (cz[l] == -1) feq*= (-eps+P)/2;
    #endif

    return feq;
}

double LBM::calculate_geq(int l, double rho, double U, double theta, double v[])
{
    double geq = 0.0;

    if ( l == 0 )
        geq = -1.0*U*pow(theta, 3) - 1.0*U*pow(theta, 2)*pow(v[0], 2) - 1.0*U*pow(theta, 2)*pow(v[1], 2) - 1.0*U*pow(theta, 2)*pow(v[2], 2) + 3.0*U*pow(theta, 2) - 1.0*U*theta*pow(v[0], 2)*pow(v[1], 2) - 1.0*U*theta*pow(v[0], 2)*pow(v[2], 2) + 2.0*U*theta*pow(v[0], 2) - 1.0*U*theta*pow(v[1], 2)*pow(v[2], 2) + 2.0*U*theta*pow(v[1], 2) + 2.0*U*theta*pow(v[2], 2) - 3.0*U*theta - 1.0*U*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) + 1.0*U*pow(v[0], 2)*pow(v[1], 2) + 1.0*U*pow(v[0], 2)*pow(v[2], 2) - 1.0*U*pow(v[0], 2) + 1.0*U*pow(v[1], 2)*pow(v[2], 2) - 1.0*U*pow(v[1], 2) - 1.0*U*pow(v[2], 2) + 1.0*U - 3.0*pow(theta, 4) - 4.5*pow(theta, 3)*pow(v[0], 2) - 4.5*pow(theta, 3)*pow(v[1], 2) - 4.5*pow(theta, 3)*pow(v[2], 2) + 6.0*pow(theta, 3) - 0.5*pow(theta, 2)*pow(v[0], 4) - 6.0*pow(theta, 2)*pow(v[0], 2)*pow(v[1], 2) - 6.0*pow(theta, 2)*pow(v[0], 2)*pow(v[2], 2) + 7.5*pow(theta, 2)*pow(v[0], 2) - 0.5*pow(theta, 2)*pow(v[1], 4) - 6.0*pow(theta, 2)*pow(v[1], 2)*pow(v[2], 2) + 7.5*pow(theta, 2)*pow(v[1], 2) - 0.5*pow(theta, 2)*pow(v[2], 4) + 7.5*pow(theta, 2)*pow(v[2], 2) - 3.0*pow(theta, 2) - 0.5*theta*pow(v[0], 4)*pow(v[1], 2) - 0.5*theta*pow(v[0], 4)*pow(v[2], 2) + 1.0*theta*pow(v[0], 4) - 0.5*theta*pow(v[0], 2)*pow(v[1], 4) - 7.5*theta*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) + 6.0*theta*pow(v[0], 2)*pow(v[1], 2) - 0.5*theta*pow(v[0], 2)*pow(v[2], 4) + 6.0*theta*pow(v[0], 2)*pow(v[2], 2) - 3.5*theta*pow(v[0], 2) - 0.5*theta*pow(v[1], 4)*pow(v[2], 2) + 1.0*theta*pow(v[1], 4) - 0.5*theta*pow(v[1], 2)*pow(v[2], 4) + 6.0*theta*pow(v[1], 2)*pow(v[2], 2) - 3.5*theta*pow(v[1], 2) + 1.0*theta*pow(v[2], 4) - 3.5*theta*pow(v[2], 2) - 0.5*pow(v[0], 4)*pow(v[1], 2)*pow(v[2], 2) + 0.5*pow(v[0], 4)*pow(v[1], 2) + 0.5*pow(v[0], 4)*pow(v[2], 2) - 0.5*pow(v[0], 4) - 0.5*pow(v[0], 2)*pow(v[1], 4)*pow(v[2], 2) + 0.5*pow(v[0], 2)*pow(v[1], 4) - 0.5*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 4) + 1.5*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 1.0*pow(v[0], 2)*pow(v[1], 2) + 0.5*pow(v[0], 2)*pow(v[2], 4) - 1.0*pow(v[0], 2)*pow(v[2], 2) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 4)*pow(v[2], 2) - 0.5*pow(v[1], 4) + 0.5*pow(v[1], 2)*pow(v[2], 4) - 1.0*pow(v[1], 2)*pow(v[2], 2) + 0.5*pow(v[1], 2) - 0.5*pow(v[2], 4) + 0.5*pow(v[2], 2) ;
    else if ( l == 1 )
        geq = 0.5*U*pow(theta, 3) + 0.5*U*pow(theta, 2)*pow(v[0], 2) + 0.5*U*pow(theta, 2)*v[0] + 0.5*U*pow(theta, 2)*pow(v[1], 2) + 0.5*U*pow(theta, 2)*pow(v[2], 2) - 1.0*U*pow(theta, 2) + 0.5*U*theta*pow(v[0], 2)*pow(v[1], 2) + 0.5*U*theta*pow(v[0], 2)*pow(v[2], 2) - 1.0*U*theta*pow(v[0], 2) + 0.5*U*theta*v[0]*pow(v[1], 2) + 0.5*U*theta*v[0]*pow(v[2], 2) - 1.0*U*theta*v[0] + 0.5*U*theta*pow(v[1], 2)*pow(v[2], 2) - 0.5*U*theta*pow(v[1], 2) - 0.5*U*theta*pow(v[2], 2) + 0.5*U*theta + 0.5*U*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 0.5*U*pow(v[0], 2)*pow(v[1], 2) - 0.5*U*pow(v[0], 2)*pow(v[2], 2) + 0.5*U*pow(v[0], 2) + 0.5*U*v[0]*pow(v[1], 2)*pow(v[2], 2) - 0.5*U*v[0]*pow(v[1], 2) - 0.5*U*v[0]*pow(v[2], 2) + 0.5*U*v[0] + 1.5*pow(theta, 4) + 2.25*pow(theta, 3)*pow(v[0], 2) + 1.5*pow(theta, 3)*v[0] + 2.25*pow(theta, 3)*pow(v[1], 2) + 2.25*pow(theta, 3)*pow(v[2], 2) - 2.0*pow(theta, 3) + 0.25*pow(theta, 2)*pow(v[0], 4) + 0.25*pow(theta, 2)*pow(v[0], 3) + 3.0*pow(theta, 2)*pow(v[0], 2)*pow(v[1], 2) + 3.0*pow(theta, 2)*pow(v[0], 2)*pow(v[2], 2) - 3.5*pow(theta, 2)*pow(v[0], 2) + 2.25*pow(theta, 2)*v[0]*pow(v[1], 2) + 2.25*pow(theta, 2)*v[0]*pow(v[2], 2) - 2.0*pow(theta, 2)*v[0] + 0.25*pow(theta, 2)*pow(v[1], 4) + 3.0*pow(theta, 2)*pow(v[1], 2)*pow(v[2], 2) - 2.0*pow(theta, 2)*pow(v[1], 2) + 0.25*pow(theta, 2)*pow(v[2], 4) - 2.0*pow(theta, 2)*pow(v[2], 2) + 0.5*pow(theta, 2) + 0.25*theta*pow(v[0], 4)*pow(v[1], 2) + 0.25*theta*pow(v[0], 4)*pow(v[2], 2) - 0.5*theta*pow(v[0], 4) + 0.25*theta*pow(v[0], 3)*pow(v[1], 2) + 0.25*theta*pow(v[0], 3)*pow(v[2], 2) - 0.5*theta*pow(v[0], 3) + 0.25*theta*pow(v[0], 2)*pow(v[1], 4) + 3.75*theta*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 2.75*theta*pow(v[0], 2)*pow(v[1], 2) + 0.25*theta*pow(v[0], 2)*pow(v[2], 4) - 2.75*theta*pow(v[0], 2)*pow(v[2], 2) + 1.25*theta*pow(v[0], 2) + 0.25*theta*v[0]*pow(v[1], 4) + 3.0*theta*v[0]*pow(v[1], 2)*pow(v[2], 2) - 2.0*theta*v[0]*pow(v[1], 2) + 0.25*theta*v[0]*pow(v[2], 4) - 2.0*theta*v[0]*pow(v[2], 2) + 0.5*theta*v[0] + 0.25*theta*pow(v[1], 4)*pow(v[2], 2) - 0.25*theta*pow(v[1], 4) + 0.25*theta*pow(v[1], 2)*pow(v[2], 4) - 0.5*theta*pow(v[1], 2)*pow(v[2], 2) + 0.25*theta*pow(v[1], 2) - 0.25*theta*pow(v[2], 4) + 0.25*theta*pow(v[2], 2) + 0.25*pow(v[0], 4)*pow(v[1], 2)*pow(v[2], 2) - 0.25*pow(v[0], 4)*pow(v[1], 2) - 0.25*pow(v[0], 4)*pow(v[2], 2) + 0.25*pow(v[0], 4) + 0.25*pow(v[0], 3)*pow(v[1], 2)*pow(v[2], 2) - 0.25*pow(v[0], 3)*pow(v[1], 2) - 0.25*pow(v[0], 3)*pow(v[2], 2) + 0.25*pow(v[0], 3) + 0.25*pow(v[0], 2)*pow(v[1], 4)*pow(v[2], 2) - 0.25*pow(v[0], 2)*pow(v[1], 4) + 0.25*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 4) - 0.5*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) + 0.25*pow(v[0], 2)*pow(v[1], 2) - 0.25*pow(v[0], 2)*pow(v[2], 4) + 0.25*pow(v[0], 2)*pow(v[2], 2) + 0.25*v[0]*pow(v[1], 4)*pow(v[2], 2) - 0.25*v[0]*pow(v[1], 4) + 0.25*v[0]*pow(v[1], 2)*pow(v[2], 4) - 0.5*v[0]*pow(v[1], 2)*pow(v[2], 2) + 0.25*v[0]*pow(v[1], 2) - 0.25*v[0]*pow(v[2], 4) + 0.25*v[0]*pow(v[2], 2) ;
    else if ( l == 2 )
        geq = 0.5*U*pow(theta, 3) + 0.5*U*pow(theta, 2)*pow(v[0], 2) - 0.5*U*pow(theta, 2)*v[0] + 0.5*U*pow(theta, 2)*pow(v[1], 2) + 0.5*U*pow(theta, 2)*pow(v[2], 2) - 1.0*U*pow(theta, 2) + 0.5*U*theta*pow(v[0], 2)*pow(v[1], 2) + 0.5*U*theta*pow(v[0], 2)*pow(v[2], 2) - 1.0*U*theta*pow(v[0], 2) - 0.5*U*theta*v[0]*pow(v[1], 2) - 0.5*U*theta*v[0]*pow(v[2], 2) + 1.0*U*theta*v[0] + 0.5*U*theta*pow(v[1], 2)*pow(v[2], 2) - 0.5*U*theta*pow(v[1], 2) - 0.5*U*theta*pow(v[2], 2) + 0.5*U*theta + 0.5*U*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 0.5*U*pow(v[0], 2)*pow(v[1], 2) - 0.5*U*pow(v[0], 2)*pow(v[2], 2) + 0.5*U*pow(v[0], 2) - 0.5*U*v[0]*pow(v[1], 2)*pow(v[2], 2) + 0.5*U*v[0]*pow(v[1], 2) + 0.5*U*v[0]*pow(v[2], 2) - 0.5*U*v[0] + 1.5*pow(theta, 4) + 2.25*pow(theta, 3)*pow(v[0], 2) - 1.5*pow(theta, 3)*v[0] + 2.25*pow(theta, 3)*pow(v[1], 2) + 2.25*pow(theta, 3)*pow(v[2], 2) - 2.0*pow(theta, 3) + 0.25*pow(theta, 2)*pow(v[0], 4) - 0.25*pow(theta, 2)*pow(v[0], 3) + 3.0*pow(theta, 2)*pow(v[0], 2)*pow(v[1], 2) + 3.0*pow(theta, 2)*pow(v[0], 2)*pow(v[2], 2) - 3.5*pow(theta, 2)*pow(v[0], 2) - 2.25*pow(theta, 2)*v[0]*pow(v[1], 2) - 2.25*pow(theta, 2)*v[0]*pow(v[2], 2) + 2.0*pow(theta, 2)*v[0] + 0.25*pow(theta, 2)*pow(v[1], 4) + 3.0*pow(theta, 2)*pow(v[1], 2)*pow(v[2], 2) - 2.0*pow(theta, 2)*pow(v[1], 2) + 0.25*pow(theta, 2)*pow(v[2], 4) - 2.0*pow(theta, 2)*pow(v[2], 2) + 0.5*pow(theta, 2) + 0.25*theta*pow(v[0], 4)*pow(v[1], 2) + 0.25*theta*pow(v[0], 4)*pow(v[2], 2) - 0.5*theta*pow(v[0], 4) - 0.25*theta*pow(v[0], 3)*pow(v[1], 2) - 0.25*theta*pow(v[0], 3)*pow(v[2], 2) + 0.5*theta*pow(v[0], 3) + 0.25*theta*pow(v[0], 2)*pow(v[1], 4) + 3.75*theta*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 2.75*theta*pow(v[0], 2)*pow(v[1], 2) + 0.25*theta*pow(v[0], 2)*pow(v[2], 4) - 2.75*theta*pow(v[0], 2)*pow(v[2], 2) + 1.25*theta*pow(v[0], 2) - 0.25*theta*v[0]*pow(v[1], 4) - 3.0*theta*v[0]*pow(v[1], 2)*pow(v[2], 2) + 2.0*theta*v[0]*pow(v[1], 2) - 0.25*theta*v[0]*pow(v[2], 4) + 2.0*theta*v[0]*pow(v[2], 2) - 0.5*theta*v[0] + 0.25*theta*pow(v[1], 4)*pow(v[2], 2) - 0.25*theta*pow(v[1], 4) + 0.25*theta*pow(v[1], 2)*pow(v[2], 4) - 0.5*theta*pow(v[1], 2)*pow(v[2], 2) + 0.25*theta*pow(v[1], 2) - 0.25*theta*pow(v[2], 4) + 0.25*theta*pow(v[2], 2) + 0.25*pow(v[0], 4)*pow(v[1], 2)*pow(v[2], 2) - 0.25*pow(v[0], 4)*pow(v[1], 2) - 0.25*pow(v[0], 4)*pow(v[2], 2) + 0.25*pow(v[0], 4) - 0.25*pow(v[0], 3)*pow(v[1], 2)*pow(v[2], 2) + 0.25*pow(v[0], 3)*pow(v[1], 2) + 0.25*pow(v[0], 3)*pow(v[2], 2) - 0.25*pow(v[0], 3) + 0.25*pow(v[0], 2)*pow(v[1], 4)*pow(v[2], 2) - 0.25*pow(v[0], 2)*pow(v[1], 4) + 0.25*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 4) - 0.5*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) + 0.25*pow(v[0], 2)*pow(v[1], 2) - 0.25*pow(v[0], 2)*pow(v[2], 4) + 0.25*pow(v[0], 2)*pow(v[2], 2) - 0.25*v[0]*pow(v[1], 4)*pow(v[2], 2) + 0.25*v[0]*pow(v[1], 4) - 0.25*v[0]*pow(v[1], 2)*pow(v[2], 4) + 0.5*v[0]*pow(v[1], 2)*pow(v[2], 2) - 0.25*v[0]*pow(v[1], 2) + 0.25*v[0]*pow(v[2], 4) - 0.25*v[0]*pow(v[2], 2) ;
    else if ( l == 3 )
        geq = -0.5*theta*v[1]*(theta + pow(v[0], 2) - 1) + (1.0/2.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1])) + (1.0/2.0)*theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 1.0/2.0*pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) + (1.0/2.0)*v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + (1.0/2.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) ;
    else if ( l == 4 )
        geq = 0.5*theta*v[1]*(theta + pow(v[0], 2) - 1) + (1.0/2.0)*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) + v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1])) + (1.0/2.0)*theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 1.0/2.0*pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - 1.0/2.0*v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + (1.0/2.0)*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) ;
    else if ( l == 5 )
        geq = 0.5*theta*v[2]*(theta*(theta + pow(v[0], 2) - 1) - theta - pow(v[0], 2) + pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 1) + (1.0/2.0)*theta*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 1.0*theta*(-theta*(theta + pow(v[0], 2) - 1) + theta + pow(v[0], 2) + pow(v[1], 2)*(-theta - pow(v[0], 2) + 1) - 1) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) + 0.5*pow(v[1], 2) - 1.0*pow(v[2], 2)*(-theta*(theta + pow(v[0], 2) - 1) + theta + pow(v[0], 2) + pow(v[1], 2)*(-theta - pow(v[0], 2) + 1) - 1) + 0.5*pow(v[2], 2)) - 1.0/2.0*pow(v[2], 2)*(-U + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 1.0*theta*(theta*(theta + pow(v[0], 2) - 1) - theta - pow(v[0], 2) + pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 1) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) + (1.0/2.0)*v[2]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) ;
    else if ( l == 6 )
        geq = (1.0/2.0)*U*pow(theta, 3) + (1.0/2.0)*U*pow(theta, 2)*pow(v[0], 2) + (1.0/2.0)*U*pow(theta, 2)*pow(v[1], 2) + (1.0/2.0)*U*pow(theta, 2)*pow(v[2], 2) - 1.0/2.0*U*pow(theta, 2)*v[2] - U*pow(theta, 2) + (1.0/2.0)*U*theta*pow(v[0], 2)*pow(v[1], 2) + (1.0/2.0)*U*theta*pow(v[0], 2)*pow(v[2], 2) - 1.0/2.0*U*theta*pow(v[0], 2)*v[2] - 1.0/2.0*U*theta*pow(v[0], 2) + (1.0/2.0)*U*theta*pow(v[1], 2)*pow(v[2], 2) - 1.0/2.0*U*theta*pow(v[1], 2)*v[2] - 1.0/2.0*U*theta*pow(v[1], 2) - U*theta*pow(v[2], 2) + U*theta*v[2] + (1.0/2.0)*U*theta + (1.0/2.0)*U*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 1.0/2.0*U*pow(v[0], 2)*pow(v[1], 2)*v[2] - 1.0/2.0*U*pow(v[0], 2)*pow(v[2], 2) + (1.0/2.0)*U*pow(v[0], 2)*v[2] - 1.0/2.0*U*pow(v[1], 2)*pow(v[2], 2) + (1.0/2.0)*U*pow(v[1], 2)*v[2] + (1.0/2.0)*U*pow(v[2], 2) - 1.0/2.0*U*v[2] + 1.5*pow(theta, 4) + 2.25*pow(theta, 3)*pow(v[0], 2) + 2.25*pow(theta, 3)*pow(v[1], 2) + 2.25*pow(theta, 3)*pow(v[2], 2) - 1.5*pow(theta, 3)*v[2] - 2.0*pow(theta, 3) + 0.25*pow(theta, 2)*pow(v[0], 4) + 3.0*pow(theta, 2)*pow(v[0], 2)*pow(v[1], 2) + 3.0*pow(theta, 2)*pow(v[0], 2)*pow(v[2], 2) - 2.25*pow(theta, 2)*pow(v[0], 2)*v[2] - 2.0*pow(theta, 2)*pow(v[0], 2) + 0.25*pow(theta, 2)*pow(v[1], 4) + 3.0*pow(theta, 2)*pow(v[1], 2)*pow(v[2], 2) - 2.25*pow(theta, 2)*pow(v[1], 2)*v[2] - 2.0*pow(theta, 2)*pow(v[1], 2) + 0.25*pow(theta, 2)*pow(v[2], 4) - 0.25*pow(theta, 2)*pow(v[2], 3) - 3.5*pow(theta, 2)*pow(v[2], 2) + 2.0*pow(theta, 2)*v[2] + 0.5*pow(theta, 2) + 0.25*theta*pow(v[0], 4)*pow(v[1], 2) + 0.25*theta*pow(v[0], 4)*pow(v[2], 2) - 0.25*theta*pow(v[0], 4)*v[2] - 0.25*theta*pow(v[0], 4) + 0.25*theta*pow(v[0], 2)*pow(v[1], 4) + 3.75*theta*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 3.0*theta*pow(v[0], 2)*pow(v[1], 2)*v[2] - 0.5*theta*pow(v[0], 2)*pow(v[1], 2) + 0.25*theta*pow(v[0], 2)*pow(v[2], 4) - 0.25*theta*pow(v[0], 2)*pow(v[2], 3) - 2.75*theta*pow(v[0], 2)*pow(v[2], 2) + 2.0*theta*pow(v[0], 2)*v[2] + 0.25*theta*pow(v[0], 2) + 0.25*theta*pow(v[1], 4)*pow(v[2], 2) - 0.25*theta*pow(v[1], 4)*v[2] - 0.25*theta*pow(v[1], 4) + 0.25*theta*pow(v[1], 2)*pow(v[2], 4) - 0.25*theta*pow(v[1], 2)*pow(v[2], 3) - 2.75*theta*pow(v[1], 2)*pow(v[2], 2) + 2.0*theta*pow(v[1], 2)*v[2] + 0.25*theta*pow(v[1], 2) - 0.5*theta*pow(v[2], 4) + 0.5*theta*pow(v[2], 3) + 1.25*theta*pow(v[2], 2) - 0.5*theta*v[2] + 0.25*pow(v[0], 4)*pow(v[1], 2)*pow(v[2], 2) - 0.25*pow(v[0], 4)*pow(v[1], 2)*v[2] - 0.25*pow(v[0], 4)*pow(v[2], 2) + 0.25*pow(v[0], 4)*v[2] + 0.25*pow(v[0], 2)*pow(v[1], 4)*pow(v[2], 2) - 0.25*pow(v[0], 2)*pow(v[1], 4)*v[2] + 0.25*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 4) - 0.25*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 3) - 0.5*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) + 0.5*pow(v[0], 2)*pow(v[1], 2)*v[2] - 0.25*pow(v[0], 2)*pow(v[2], 4) + 0.25*pow(v[0], 2)*pow(v[2], 3) + 0.25*pow(v[0], 2)*pow(v[2], 2) - 0.25*pow(v[0], 2)*v[2] - 0.25*pow(v[1], 4)*pow(v[2], 2) + 0.25*pow(v[1], 4)*v[2] - 0.25*pow(v[1], 2)*pow(v[2], 4) + 0.25*pow(v[1], 2)*pow(v[2], 3) + 0.25*pow(v[1], 2)*pow(v[2], 2) - 0.25*pow(v[1], 2)*v[2] + 0.25*pow(v[2], 4) - 0.25*pow(v[2], 3) ;
    else if ( l == 7 )
        geq = 0.25*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + (1.0/4.0)*theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - 1.0/4.0*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1])) + (1.0/4.0)*pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + (1.0/4.0)*v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + 1.0*theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 8 )
        geq = -0.25*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + (1.0/4.0)*theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - 1.0/4.0*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1])) + (1.0/4.0)*pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + (1.0/4.0)*v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + 1.0*theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 9 )
        geq = 0.25*theta*v[2]*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + (1.0/4.0)*theta*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0]))) + (1.0/4.0)*pow(v[2], 2)*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) + (1.0/4.0)*v[2]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 10 )
        geq = 0.25*theta*v[2]*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - 1.0/4.0*theta*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0]))) - 1.0/4.0*pow(v[2], 2)*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) + (1.0/4.0)*v[2]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 11 )
        geq = -0.25*theta*v[2]*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - 1.0/4.0*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1])) + (1.0/4.0)*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) - 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + (1.0/4.0)*v[2]*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) ;
    else if ( l == 12 )
        geq = 0.25*theta*v[2]*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) + (1.0/4.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) - 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1])) + (1.0/4.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) - 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) ;
    else if ( l == 13 )
        geq = -0.25*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + (1.0/4.0)*theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - 1.0/4.0*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1])) + (1.0/4.0)*pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + 1.0*theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 14 )
        geq = 0.25*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + (1.0/4.0)*theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - 1.0/4.0*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1])) + (1.0/4.0)*pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + 1.0*theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 15 )
        geq = -0.25*theta*v[2]*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + (1.0/4.0)*theta*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0]))) + (1.0/4.0)*pow(v[2], 2)*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) - 1.0/4.0*v[2]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 16 )
        geq = -0.25*theta*v[2]*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - 1.0/4.0*theta*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0]))) - 1.0/4.0*pow(v[2], 2)*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) - 1.0/4.0*v[2]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 17 )
        geq = 0.25*theta*v[2]*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - 1.0/4.0*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1])) - 1.0/4.0*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + (1.0/4.0)*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) ;
    else if ( l == 18 )
        geq = -0.25*theta*v[2]*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) + (1.0/4.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) - 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1])) + (1.0/4.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) - 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + (1.0/4.0)*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) ;
    else if ( l == 19 )
        geq = 0.125*theta*v[2]*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + (1.0/8.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1])) + (1.0/8.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + 1.0*theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) + (1.0/8.0)*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 20 )
        geq = -0.125*theta*v[2]*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + (1.0/8.0)*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1])) + (1.0/8.0)*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + 1.0*theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) - 1.0/8.0*v[2]*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 21 )
        geq = -0.125*theta*v[2]*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + (1.0/8.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1])) + (1.0/8.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + 1.0*theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) - 1.0/8.0*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 22 )
        geq = 0.125*theta*v[2]*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + (1.0/8.0)*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1])) + (1.0/8.0)*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + 1.0*theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) + (1.0/8.0)*v[2]*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 23 )
        geq = 0.125*theta*v[2]*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + (1.0/8.0)*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1])) + (1.0/8.0)*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + 1.0*theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) - 1.0/8.0*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 24 )
        geq = -0.125*theta*v[2]*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + (1.0/8.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1])) + (1.0/8.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + 1.0*theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) - 1.0/8.0*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 25 )
        geq = 0.125*theta*v[2]*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + (1.0/8.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1])) + (1.0/8.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + 1.0*theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) + (1.0/8.0)*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 26 )
        geq = -0.125*theta*v[2]*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + (1.0/8.0)*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1])) + (1.0/8.0)*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + 1.0*theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) + (1.0/8.0)*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    
    return geq*rho;
}

double LBM::calculate_geq(int l, double rhoe, double eq_heat_flux[], double eq_R_tensor[][3], double theta)
{
    double geq = rhoe;
    
    double velocity_set[3] = {cx[l], cy[l], cz[l]};
    geq += dotproduct_Vec3(eq_heat_flux, velocity_set) / theta;

    double matA[3][3] = {{eq_R_tensor[0][0]-rhoe*theta, eq_R_tensor[0][1]           , eq_R_tensor[0][2]},
                         {eq_R_tensor[1][0]           , eq_R_tensor[1][1]-rhoe*theta, eq_R_tensor[1][2]},
                         {eq_R_tensor[2][0]           , eq_R_tensor[2][1]           , eq_R_tensor[2][2]-rhoe*theta}};
    double matB[3][3] = {{cx[l]*cx[l]-theta  , cx[l]*cy[l]        , cx[l]*cz[l]},
                         {cy[l]*cx[l]        , cy[l]*cy[l]-theta  , cy[l]*cz[l]},
                         {cz[l]*cx[l]        , cz[l]*cy[l]        , cz[l]*cz[l]-theta}};
    double result_AB = (matA[0][0]*matB[0][0] + matA[1][0]*matB[1][0] + matA[2][0]*matB[2][0]) + (matA[0][1]*matB[0][1] + matA[1][1]*matB[1][1] + matA[2][1]*matB[2][1]) + (matA[0][2]*matB[0][2] + matA[1][2]*matB[1][2] + matA[2][2]*matB[2][2]);
    geq += result_AB/(2.0*theta*theta);
    
    double weight = 1.0;
    for (int m = 0; m < 3; ++m)
    {
        if (velocity_set[m] == 0) weight *= (1 - theta);
        else weight *= theta / 2.0;
    } 
    geq = weight * geq;

    double B;
    double Z;
    for (int m = 0; m < 3; ++m)
    {
        if (v_sqr(velocity_set[0], velocity_set[1], velocity_set[2]) == 0) B = 1;
        else if (v_sqr(velocity_set[0], velocity_set[1], velocity_set[2]) == 1) B = -0.5*abs(velocity_set[m]);
        else B = 0;
        
        Z = (1-3*theta)/(2*theta) * (eq_R_tensor[m][m]-theta*rhoe);

        geq += B*Z;
    }

    return geq;
}

double LBM::calculate_gstr(int l, double geq, double d_str_heat_flux[])
{
    double velocity_set[3] = {cx[l], cy[l], cz[l]};
    double gstr = 0.0;
    if(v_sqr(velocity_set[0], velocity_set[1], velocity_set[2]) == 1.0)
        gstr = geq + 0.5*dotproduct_Vec3(velocity_set, d_str_heat_flux);
    else
        gstr = geq;
    
    return gstr;
}

void LBM::calculate_feq_geq(double f_tgt[], double g_tgt[], double rho_bb, double vel_tgt[], double temp_tgt)
{
    double theta = gas_const*temp_tgt;
    double cv = gas_const / (gamma - 1.0);
    double internal_energy = cv * temp_tgt;

    double corr[3]= {0, 0, 0};
    for (int l=0; l < npop; ++l){   
        f_tgt[l] = calculate_feq(l, rho_bb, vel_tgt, theta, corr);
        g_tgt[l] = calculate_geq(l, rho_bb, internal_energy, theta, vel_tgt);
    }
}

#ifdef MULTICOMP
void LBM::calculate_feq_geq(double fa_tgt[][npop], double g_tgt[], double rho_bb, double rhoa_bb[], double vel_tgt[], double vela_tgt[][3], double temp_tgt)
{

    int rank = omp_get_thread_num();
    auto gas = sols[rank]->thermo();
    std::vector <double> Y (gas->nSpecies());
    for(size_t a = 0; a < nSpecies; ++a)
        Y[gas->speciesIndex(speciesName[a])] = rhoa_bb[a] / rho_bb;
    
    gas->setMassFractions(&Y[0]);
    gas->setState_TD(units.si_temp(temp_tgt), units.si_rho(rho_bb));

    double internal_energy = units.energy_mass(gas->intEnergy_mass());
    double theta = units.energy_mass(gas->RT()/gas->meanMolecularWeight());      
    
    double corr[3]= {0, 0, 0};
    for (int l=0; l < npop; ++l){   
        for (size_t a = 0; a < nSpecies; ++a){
            double theta_a = units.energy_mass(gas->RT()/gas->molecularWeight(gas->speciesIndex(speciesName[a]))); 
            fa_tgt[a][l] = calculate_feq(l, rhoa_bb[a], vela_tgt[a], theta_a, corr);
        }

        g_tgt[l] = calculate_geq(l, rho_bb, internal_energy, theta, vel_tgt);
    }
}

void LBM::calculate_feq_geq(double fa_tgt[][npop], double g_tgt[], double rho_bb, double rhoa_bb[], double vel_tgt[], double temp_tgt)
{   

    double vela_tgt [nSpecies][3] = {0.0};
    for (size_t a = 0; a < nSpecies; ++a){
        vela_tgt[a][0] = vel_tgt[0];
        vela_tgt[a][1] = vel_tgt[1];
        vela_tgt[a][2] = vel_tgt[2];

    }
    calculate_feq_geq(fa_tgt, g_tgt, rho_bb, rhoa_bb, vel_tgt, vela_tgt, temp_tgt);
}
#endif