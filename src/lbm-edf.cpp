#include "lbm.hpp"
#include "math_util.hpp"

double LBM::calculate_feq(int l, double rho, double velocity[], double theta, double corr[])
{
    double eps = 0.0;
    double P = 0.0;
    double feq = rho;

        eps = velocity[0];
        P = theta + sq(velocity[0]) + corr[0];
        if (cx[l] == 0) feq *= (1 - P);
        else if (cx[l] == 1) feq *= (eps+P)/2;
        else if (cx[l] == -1) feq*= (-eps+P)/2;
    
    #if NDIM == 2 || NDIM == 3
        eps = velocity[1];
        P = theta + sq(velocity[1]) + corr[1];;
        if (cy[l] == 0) feq *= (1 - P);
        else if (cy[l] == 1) feq *= (eps+P)/2;
        else if (cy[l] == -1) feq*= (-eps+P)/2;
    #endif

    #if NDIM == 3
        eps = velocity[2];
        P = theta + sq(velocity[2]) + corr[2];
        if (cz[l] == 0) feq *= (1 - P);
        else if (cz[l] == 1) feq *= (eps+P)/2;
        else if (cz[l] == -1) feq*= (-eps+P)/2;
    #endif

    return feq;
}

double LBM::calculate_geq(int l, double rho, double U, double theta, double v[])
{
    double geq = 0.0;

    if ( l == 0 )
        geq = -1.0*U*pow(theta, 3) - 1.0*U*pow(theta, 2)*pow(v[0], 2) - 1.0*U*pow(theta, 2)*pow(v[1], 2) - 1.0*U*pow(theta, 2)*pow(v[2], 2) + 3.0*U*pow(theta, 2) - 1.0*U*theta*pow(v[0], 2)*pow(v[1], 2) - 1.0*U*theta*pow(v[0], 2)*pow(v[2], 2) + 2.0*U*theta*pow(v[0], 2) - 1.0*U*theta*pow(v[1], 2)*pow(v[2], 2) + 2.0*U*theta*pow(v[1], 2) + 2.0*U*theta*pow(v[2], 2) - 3.0*U*theta - 1.0*U*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) + 1.0*U*pow(v[0], 2)*pow(v[1], 2) + 1.0*U*pow(v[0], 2)*pow(v[2], 2) - 1.0*U*pow(v[0], 2) + 1.0*U*pow(v[1], 2)*pow(v[2], 2) - 1.0*U*pow(v[1], 2) - 1.0*U*pow(v[2], 2) + 1.0*U - 3.0*pow(theta, 4) - 4.5*pow(theta, 3)*pow(v[0], 2) - 4.5*pow(theta, 3)*pow(v[1], 2) - 4.5*pow(theta, 3)*pow(v[2], 2) + 6.0*pow(theta, 3) - 0.5*pow(theta, 2)*pow(v[0], 4) - 6.0*pow(theta, 2)*pow(v[0], 2)*pow(v[1], 2) - 6.0*pow(theta, 2)*pow(v[0], 2)*pow(v[2], 2) + 7.5*pow(theta, 2)*pow(v[0], 2) - 0.5*pow(theta, 2)*pow(v[1], 4) - 6.0*pow(theta, 2)*pow(v[1], 2)*pow(v[2], 2) + 7.5*pow(theta, 2)*pow(v[1], 2) - 0.5*pow(theta, 2)*pow(v[2], 4) + 7.5*pow(theta, 2)*pow(v[2], 2) - 3.0*pow(theta, 2) - 0.5*theta*pow(v[0], 4)*pow(v[1], 2) - 0.5*theta*pow(v[0], 4)*pow(v[2], 2) + 1.0*theta*pow(v[0], 4) - 0.5*theta*pow(v[0], 2)*pow(v[1], 4) - 7.5*theta*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) + 6.0*theta*pow(v[0], 2)*pow(v[1], 2) - 0.5*theta*pow(v[0], 2)*pow(v[2], 4) + 6.0*theta*pow(v[0], 2)*pow(v[2], 2) - 3.5*theta*pow(v[0], 2) - 0.5*theta*pow(v[1], 4)*pow(v[2], 2) + 1.0*theta*pow(v[1], 4) - 0.5*theta*pow(v[1], 2)*pow(v[2], 4) + 6.0*theta*pow(v[1], 2)*pow(v[2], 2) - 3.5*theta*pow(v[1], 2) + 1.0*theta*pow(v[2], 4) - 3.5*theta*pow(v[2], 2) - 0.5*pow(v[0], 4)*pow(v[1], 2)*pow(v[2], 2) + 0.5*pow(v[0], 4)*pow(v[1], 2) + 0.5*pow(v[0], 4)*pow(v[2], 2) - 0.5*pow(v[0], 4) - 0.5*pow(v[0], 2)*pow(v[1], 4)*pow(v[2], 2) + 0.5*pow(v[0], 2)*pow(v[1], 4) - 0.5*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 4) + 1.5*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 1.0*pow(v[0], 2)*pow(v[1], 2) + 0.5*pow(v[0], 2)*pow(v[2], 4) - 1.0*pow(v[0], 2)*pow(v[2], 2) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 4)*pow(v[2], 2) - 0.5*pow(v[1], 4) + 0.5*pow(v[1], 2)*pow(v[2], 4) - 1.0*pow(v[1], 2)*pow(v[2], 2) + 0.5*pow(v[1], 2) - 0.5*pow(v[2], 4) + 0.5*pow(v[2], 2) ;
    else if ( l == 1 )
        geq = 0.5*U*pow(theta, 3) + 0.5*U*pow(theta, 2)*pow(v[0], 2) + 0.5*U*pow(theta, 2)*v[0] + 0.5*U*pow(theta, 2)*pow(v[1], 2) + 0.5*U*pow(theta, 2)*pow(v[2], 2) - 1.0*U*pow(theta, 2) + 0.5*U*theta*pow(v[0], 2)*pow(v[1], 2) + 0.5*U*theta*pow(v[0], 2)*pow(v[2], 2) - 1.0*U*theta*pow(v[0], 2) + 0.5*U*theta*v[0]*pow(v[1], 2) + 0.5*U*theta*v[0]*pow(v[2], 2) - 1.0*U*theta*v[0] + 0.5*U*theta*pow(v[1], 2)*pow(v[2], 2) - 0.5*U*theta*pow(v[1], 2) - 0.5*U*theta*pow(v[2], 2) + 0.5*U*theta + 0.5*U*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 0.5*U*pow(v[0], 2)*pow(v[1], 2) - 0.5*U*pow(v[0], 2)*pow(v[2], 2) + 0.5*U*pow(v[0], 2) + 0.5*U*v[0]*pow(v[1], 2)*pow(v[2], 2) - 0.5*U*v[0]*pow(v[1], 2) - 0.5*U*v[0]*pow(v[2], 2) + 0.5*U*v[0] + 1.5*pow(theta, 4) + 2.25*pow(theta, 3)*pow(v[0], 2) + 1.5*pow(theta, 3)*v[0] + 2.25*pow(theta, 3)*pow(v[1], 2) + 2.25*pow(theta, 3)*pow(v[2], 2) - 2.0*pow(theta, 3) + 0.25*pow(theta, 2)*pow(v[0], 4) + 0.25*pow(theta, 2)*pow(v[0], 3) + 3.0*pow(theta, 2)*pow(v[0], 2)*pow(v[1], 2) + 3.0*pow(theta, 2)*pow(v[0], 2)*pow(v[2], 2) - 3.5*pow(theta, 2)*pow(v[0], 2) + 2.25*pow(theta, 2)*v[0]*pow(v[1], 2) + 2.25*pow(theta, 2)*v[0]*pow(v[2], 2) - 2.0*pow(theta, 2)*v[0] + 0.25*pow(theta, 2)*pow(v[1], 4) + 3.0*pow(theta, 2)*pow(v[1], 2)*pow(v[2], 2) - 2.0*pow(theta, 2)*pow(v[1], 2) + 0.25*pow(theta, 2)*pow(v[2], 4) - 2.0*pow(theta, 2)*pow(v[2], 2) + 0.5*pow(theta, 2) + 0.25*theta*pow(v[0], 4)*pow(v[1], 2) + 0.25*theta*pow(v[0], 4)*pow(v[2], 2) - 0.5*theta*pow(v[0], 4) + 0.25*theta*pow(v[0], 3)*pow(v[1], 2) + 0.25*theta*pow(v[0], 3)*pow(v[2], 2) - 0.5*theta*pow(v[0], 3) + 0.25*theta*pow(v[0], 2)*pow(v[1], 4) + 3.75*theta*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 2.75*theta*pow(v[0], 2)*pow(v[1], 2) + 0.25*theta*pow(v[0], 2)*pow(v[2], 4) - 2.75*theta*pow(v[0], 2)*pow(v[2], 2) + 1.25*theta*pow(v[0], 2) + 0.25*theta*v[0]*pow(v[1], 4) + 3.0*theta*v[0]*pow(v[1], 2)*pow(v[2], 2) - 2.0*theta*v[0]*pow(v[1], 2) + 0.25*theta*v[0]*pow(v[2], 4) - 2.0*theta*v[0]*pow(v[2], 2) + 0.5*theta*v[0] + 0.25*theta*pow(v[1], 4)*pow(v[2], 2) - 0.25*theta*pow(v[1], 4) + 0.25*theta*pow(v[1], 2)*pow(v[2], 4) - 0.5*theta*pow(v[1], 2)*pow(v[2], 2) + 0.25*theta*pow(v[1], 2) - 0.25*theta*pow(v[2], 4) + 0.25*theta*pow(v[2], 2) + 0.25*pow(v[0], 4)*pow(v[1], 2)*pow(v[2], 2) - 0.25*pow(v[0], 4)*pow(v[1], 2) - 0.25*pow(v[0], 4)*pow(v[2], 2) + 0.25*pow(v[0], 4) + 0.25*pow(v[0], 3)*pow(v[1], 2)*pow(v[2], 2) - 0.25*pow(v[0], 3)*pow(v[1], 2) - 0.25*pow(v[0], 3)*pow(v[2], 2) + 0.25*pow(v[0], 3) + 0.25*pow(v[0], 2)*pow(v[1], 4)*pow(v[2], 2) - 0.25*pow(v[0], 2)*pow(v[1], 4) + 0.25*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 4) - 0.5*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) + 0.25*pow(v[0], 2)*pow(v[1], 2) - 0.25*pow(v[0], 2)*pow(v[2], 4) + 0.25*pow(v[0], 2)*pow(v[2], 2) + 0.25*v[0]*pow(v[1], 4)*pow(v[2], 2) - 0.25*v[0]*pow(v[1], 4) + 0.25*v[0]*pow(v[1], 2)*pow(v[2], 4) - 0.5*v[0]*pow(v[1], 2)*pow(v[2], 2) + 0.25*v[0]*pow(v[1], 2) - 0.25*v[0]*pow(v[2], 4) + 0.25*v[0]*pow(v[2], 2) ;
    else if ( l == 2 )
        geq = 0.5*U*pow(theta, 3) + 0.5*U*pow(theta, 2)*pow(v[0], 2) - 0.5*U*pow(theta, 2)*v[0] + 0.5*U*pow(theta, 2)*pow(v[1], 2) + 0.5*U*pow(theta, 2)*pow(v[2], 2) - 1.0*U*pow(theta, 2) + 0.5*U*theta*pow(v[0], 2)*pow(v[1], 2) + 0.5*U*theta*pow(v[0], 2)*pow(v[2], 2) - 1.0*U*theta*pow(v[0], 2) - 0.5*U*theta*v[0]*pow(v[1], 2) - 0.5*U*theta*v[0]*pow(v[2], 2) + 1.0*U*theta*v[0] + 0.5*U*theta*pow(v[1], 2)*pow(v[2], 2) - 0.5*U*theta*pow(v[1], 2) - 0.5*U*theta*pow(v[2], 2) + 0.5*U*theta + 0.5*U*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 0.5*U*pow(v[0], 2)*pow(v[1], 2) - 0.5*U*pow(v[0], 2)*pow(v[2], 2) + 0.5*U*pow(v[0], 2) - 0.5*U*v[0]*pow(v[1], 2)*pow(v[2], 2) + 0.5*U*v[0]*pow(v[1], 2) + 0.5*U*v[0]*pow(v[2], 2) - 0.5*U*v[0] + 1.5*pow(theta, 4) + 2.25*pow(theta, 3)*pow(v[0], 2) - 1.5*pow(theta, 3)*v[0] + 2.25*pow(theta, 3)*pow(v[1], 2) + 2.25*pow(theta, 3)*pow(v[2], 2) - 2.0*pow(theta, 3) + 0.25*pow(theta, 2)*pow(v[0], 4) - 0.25*pow(theta, 2)*pow(v[0], 3) + 3.0*pow(theta, 2)*pow(v[0], 2)*pow(v[1], 2) + 3.0*pow(theta, 2)*pow(v[0], 2)*pow(v[2], 2) - 3.5*pow(theta, 2)*pow(v[0], 2) - 2.25*pow(theta, 2)*v[0]*pow(v[1], 2) - 2.25*pow(theta, 2)*v[0]*pow(v[2], 2) + 2.0*pow(theta, 2)*v[0] + 0.25*pow(theta, 2)*pow(v[1], 4) + 3.0*pow(theta, 2)*pow(v[1], 2)*pow(v[2], 2) - 2.0*pow(theta, 2)*pow(v[1], 2) + 0.25*pow(theta, 2)*pow(v[2], 4) - 2.0*pow(theta, 2)*pow(v[2], 2) + 0.5*pow(theta, 2) + 0.25*theta*pow(v[0], 4)*pow(v[1], 2) + 0.25*theta*pow(v[0], 4)*pow(v[2], 2) - 0.5*theta*pow(v[0], 4) - 0.25*theta*pow(v[0], 3)*pow(v[1], 2) - 0.25*theta*pow(v[0], 3)*pow(v[2], 2) + 0.5*theta*pow(v[0], 3) + 0.25*theta*pow(v[0], 2)*pow(v[1], 4) + 3.75*theta*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 2.75*theta*pow(v[0], 2)*pow(v[1], 2) + 0.25*theta*pow(v[0], 2)*pow(v[2], 4) - 2.75*theta*pow(v[0], 2)*pow(v[2], 2) + 1.25*theta*pow(v[0], 2) - 0.25*theta*v[0]*pow(v[1], 4) - 3.0*theta*v[0]*pow(v[1], 2)*pow(v[2], 2) + 2.0*theta*v[0]*pow(v[1], 2) - 0.25*theta*v[0]*pow(v[2], 4) + 2.0*theta*v[0]*pow(v[2], 2) - 0.5*theta*v[0] + 0.25*theta*pow(v[1], 4)*pow(v[2], 2) - 0.25*theta*pow(v[1], 4) + 0.25*theta*pow(v[1], 2)*pow(v[2], 4) - 0.5*theta*pow(v[1], 2)*pow(v[2], 2) + 0.25*theta*pow(v[1], 2) - 0.25*theta*pow(v[2], 4) + 0.25*theta*pow(v[2], 2) + 0.25*pow(v[0], 4)*pow(v[1], 2)*pow(v[2], 2) - 0.25*pow(v[0], 4)*pow(v[1], 2) - 0.25*pow(v[0], 4)*pow(v[2], 2) + 0.25*pow(v[0], 4) - 0.25*pow(v[0], 3)*pow(v[1], 2)*pow(v[2], 2) + 0.25*pow(v[0], 3)*pow(v[1], 2) + 0.25*pow(v[0], 3)*pow(v[2], 2) - 0.25*pow(v[0], 3) + 0.25*pow(v[0], 2)*pow(v[1], 4)*pow(v[2], 2) - 0.25*pow(v[0], 2)*pow(v[1], 4) + 0.25*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 4) - 0.5*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) + 0.25*pow(v[0], 2)*pow(v[1], 2) - 0.25*pow(v[0], 2)*pow(v[2], 4) + 0.25*pow(v[0], 2)*pow(v[2], 2) - 0.25*v[0]*pow(v[1], 4)*pow(v[2], 2) + 0.25*v[0]*pow(v[1], 4) - 0.25*v[0]*pow(v[1], 2)*pow(v[2], 4) + 0.5*v[0]*pow(v[1], 2)*pow(v[2], 2) - 0.25*v[0]*pow(v[1], 2) + 0.25*v[0]*pow(v[2], 4) - 0.25*v[0]*pow(v[2], 2) ;
    else if ( l == 3 )
        geq = -0.5*theta*v[1]*(theta + pow(v[0], 2) - 1) + (1.0/2.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1])) + (1.0/2.0)*theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 1.0/2.0*pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) + (1.0/2.0)*v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + (1.0/2.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) ;
    else if ( l == 4 )
        geq = 0.5*theta*v[1]*(theta + pow(v[0], 2) - 1) + (1.0/2.0)*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) + v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1])) + (1.0/2.0)*theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 1.0/2.0*pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - 1.0/2.0*v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + (1.0/2.0)*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) ;
    else if ( l == 5 )
        geq = 0.5*theta*v[2]*(theta*(theta + pow(v[0], 2) - 1) - theta - pow(v[0], 2) + pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 1) + (1.0/2.0)*theta*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 1.0*theta*(-theta*(theta + pow(v[0], 2) - 1) + theta + pow(v[0], 2) + pow(v[1], 2)*(-theta - pow(v[0], 2) + 1) - 1) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) + 0.5*pow(v[1], 2) - 1.0*pow(v[2], 2)*(-theta*(theta + pow(v[0], 2) - 1) + theta + pow(v[0], 2) + pow(v[1], 2)*(-theta - pow(v[0], 2) + 1) - 1) + 0.5*pow(v[2], 2)) - 1.0/2.0*pow(v[2], 2)*(-U + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 1.0*theta*(theta*(theta + pow(v[0], 2) - 1) - theta - pow(v[0], 2) + pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 1) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) + (1.0/2.0)*v[2]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) ;
    else if ( l == 6 )
        geq = (1.0/2.0)*U*pow(theta, 3) + (1.0/2.0)*U*pow(theta, 2)*pow(v[0], 2) + (1.0/2.0)*U*pow(theta, 2)*pow(v[1], 2) + (1.0/2.0)*U*pow(theta, 2)*pow(v[2], 2) - 1.0/2.0*U*pow(theta, 2)*v[2] - U*pow(theta, 2) + (1.0/2.0)*U*theta*pow(v[0], 2)*pow(v[1], 2) + (1.0/2.0)*U*theta*pow(v[0], 2)*pow(v[2], 2) - 1.0/2.0*U*theta*pow(v[0], 2)*v[2] - 1.0/2.0*U*theta*pow(v[0], 2) + (1.0/2.0)*U*theta*pow(v[1], 2)*pow(v[2], 2) - 1.0/2.0*U*theta*pow(v[1], 2)*v[2] - 1.0/2.0*U*theta*pow(v[1], 2) - U*theta*pow(v[2], 2) + U*theta*v[2] + (1.0/2.0)*U*theta + (1.0/2.0)*U*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 1.0/2.0*U*pow(v[0], 2)*pow(v[1], 2)*v[2] - 1.0/2.0*U*pow(v[0], 2)*pow(v[2], 2) + (1.0/2.0)*U*pow(v[0], 2)*v[2] - 1.0/2.0*U*pow(v[1], 2)*pow(v[2], 2) + (1.0/2.0)*U*pow(v[1], 2)*v[2] + (1.0/2.0)*U*pow(v[2], 2) - 1.0/2.0*U*v[2] + 1.5*pow(theta, 4) + 2.25*pow(theta, 3)*pow(v[0], 2) + 2.25*pow(theta, 3)*pow(v[1], 2) + 2.25*pow(theta, 3)*pow(v[2], 2) - 1.5*pow(theta, 3)*v[2] - 2.0*pow(theta, 3) + 0.25*pow(theta, 2)*pow(v[0], 4) + 3.0*pow(theta, 2)*pow(v[0], 2)*pow(v[1], 2) + 3.0*pow(theta, 2)*pow(v[0], 2)*pow(v[2], 2) - 2.25*pow(theta, 2)*pow(v[0], 2)*v[2] - 2.0*pow(theta, 2)*pow(v[0], 2) + 0.25*pow(theta, 2)*pow(v[1], 4) + 3.0*pow(theta, 2)*pow(v[1], 2)*pow(v[2], 2) - 2.25*pow(theta, 2)*pow(v[1], 2)*v[2] - 2.0*pow(theta, 2)*pow(v[1], 2) + 0.25*pow(theta, 2)*pow(v[2], 4) - 0.25*pow(theta, 2)*pow(v[2], 3) - 3.5*pow(theta, 2)*pow(v[2], 2) + 2.0*pow(theta, 2)*v[2] + 0.5*pow(theta, 2) + 0.25*theta*pow(v[0], 4)*pow(v[1], 2) + 0.25*theta*pow(v[0], 4)*pow(v[2], 2) - 0.25*theta*pow(v[0], 4)*v[2] - 0.25*theta*pow(v[0], 4) + 0.25*theta*pow(v[0], 2)*pow(v[1], 4) + 3.75*theta*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) - 3.0*theta*pow(v[0], 2)*pow(v[1], 2)*v[2] - 0.5*theta*pow(v[0], 2)*pow(v[1], 2) + 0.25*theta*pow(v[0], 2)*pow(v[2], 4) - 0.25*theta*pow(v[0], 2)*pow(v[2], 3) - 2.75*theta*pow(v[0], 2)*pow(v[2], 2) + 2.0*theta*pow(v[0], 2)*v[2] + 0.25*theta*pow(v[0], 2) + 0.25*theta*pow(v[1], 4)*pow(v[2], 2) - 0.25*theta*pow(v[1], 4)*v[2] - 0.25*theta*pow(v[1], 4) + 0.25*theta*pow(v[1], 2)*pow(v[2], 4) - 0.25*theta*pow(v[1], 2)*pow(v[2], 3) - 2.75*theta*pow(v[1], 2)*pow(v[2], 2) + 2.0*theta*pow(v[1], 2)*v[2] + 0.25*theta*pow(v[1], 2) - 0.5*theta*pow(v[2], 4) + 0.5*theta*pow(v[2], 3) + 1.25*theta*pow(v[2], 2) - 0.5*theta*v[2] + 0.25*pow(v[0], 4)*pow(v[1], 2)*pow(v[2], 2) - 0.25*pow(v[0], 4)*pow(v[1], 2)*v[2] - 0.25*pow(v[0], 4)*pow(v[2], 2) + 0.25*pow(v[0], 4)*v[2] + 0.25*pow(v[0], 2)*pow(v[1], 4)*pow(v[2], 2) - 0.25*pow(v[0], 2)*pow(v[1], 4)*v[2] + 0.25*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 4) - 0.25*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 3) - 0.5*pow(v[0], 2)*pow(v[1], 2)*pow(v[2], 2) + 0.5*pow(v[0], 2)*pow(v[1], 2)*v[2] - 0.25*pow(v[0], 2)*pow(v[2], 4) + 0.25*pow(v[0], 2)*pow(v[2], 3) + 0.25*pow(v[0], 2)*pow(v[2], 2) - 0.25*pow(v[0], 2)*v[2] - 0.25*pow(v[1], 4)*pow(v[2], 2) + 0.25*pow(v[1], 4)*v[2] - 0.25*pow(v[1], 2)*pow(v[2], 4) + 0.25*pow(v[1], 2)*pow(v[2], 3) + 0.25*pow(v[1], 2)*pow(v[2], 2) - 0.25*pow(v[1], 2)*v[2] + 0.25*pow(v[2], 4) - 0.25*pow(v[2], 3) ;
    else if ( l == 7 )
        geq = 0.25*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + (1.0/4.0)*theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - 1.0/4.0*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1])) + (1.0/4.0)*pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + (1.0/4.0)*v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + 1.0*theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 8 )
        geq = -0.25*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + (1.0/4.0)*theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - 1.0/4.0*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1])) + (1.0/4.0)*pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + (1.0/4.0)*v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + 1.0*theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 9 )
        geq = 0.25*theta*v[2]*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + (1.0/4.0)*theta*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0]))) + (1.0/4.0)*pow(v[2], 2)*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) + (1.0/4.0)*v[2]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 10 )
        geq = 0.25*theta*v[2]*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - 1.0/4.0*theta*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0]))) - 1.0/4.0*pow(v[2], 2)*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) + (1.0/4.0)*v[2]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 11 )
        geq = -0.25*theta*v[2]*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - 1.0/4.0*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1])) + (1.0/4.0)*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) - 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + (1.0/4.0)*v[2]*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) ;
    else if ( l == 12 )
        geq = 0.25*theta*v[2]*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) + (1.0/4.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) - 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1])) + (1.0/4.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) - 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) ;
    else if ( l == 13 )
        geq = -0.25*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + (1.0/4.0)*theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - 1.0/4.0*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1])) + (1.0/4.0)*pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + 1.0*theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 14 )
        geq = 0.25*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + (1.0/4.0)*theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - 1.0/4.0*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1])) + (1.0/4.0)*pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - 1.0/4.0*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + 1.0*theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 15 )
        geq = -0.25*theta*v[2]*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + (1.0/4.0)*theta*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0]))) + (1.0/4.0)*pow(v[2], 2)*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(-theta*(theta + pow(v[0], 2) + v[0]) + theta + pow(v[0], 2) + v[0] - pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) - 1.0/4.0*v[2]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 16 )
        geq = -0.25*theta*v[2]*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - 1.0/4.0*theta*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0]))) - 1.0/4.0*pow(v[2], 2)*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*theta*(theta*(theta + pow(v[0], 2) - v[0]) - theta - pow(v[0], 2) + v[0] + pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) - 1.0/4.0*v[2]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 17 )
        geq = 0.25*theta*v[2]*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - 1.0/4.0*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1])) - 1.0/4.0*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) + v[1]) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + (1.0/4.0)*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) - theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(-U + 1.0*theta*(theta + pow(v[0], 2) - 1) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 0.5*pow(v[0], 2) - 0.5*pow(v[1], 2) - 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) ;
    else if ( l == 18 )
        geq = -0.25*theta*v[2]*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) + (1.0/4.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) - 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1])) + (1.0/4.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) - 1.0*theta*(theta + pow(v[0], 2) - 1)*(theta + pow(v[1], 2) - v[1]) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + (1.0/4.0)*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) - 1) + theta*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) - 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - 1) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[1], 2)*(U - 1.0*theta*(theta + pow(v[0], 2) - 1) - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[1]*(U - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) ;
    else if ( l == 19 )
        geq = 0.125*theta*v[2]*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + (1.0/8.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1])) + (1.0/8.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + 1.0*theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) + (1.0/8.0)*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 20 )
        geq = -0.125*theta*v[2]*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + (1.0/8.0)*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1])) + (1.0/8.0)*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + 1.0*theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) - 1.0/8.0*v[2]*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 21 )
        geq = -0.125*theta*v[2]*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + (1.0/8.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1])) + (1.0/8.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + 1.0*theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) - 1.0/8.0*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 22 )
        geq = 0.125*theta*v[2]*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + (1.0/8.0)*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1])) + (1.0/8.0)*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + 1.0*theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) + (1.0/8.0)*v[2]*(-1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 23 )
        geq = 0.125*theta*v[2]*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + (1.0/8.0)*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1])) + (1.0/8.0)*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + 1.0*theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) - 1.0/8.0*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 24 )
        geq = -0.125*theta*v[2]*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + (1.0/8.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1])) + (1.0/8.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + 1.0*theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) - 1.0/8.0*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 25 )
        geq = 0.125*theta*v[2]*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + (1.0/8.0)*theta*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1])) + (1.0/8.0)*pow(v[2], 2)*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + 1.0*theta*(theta + pow(v[0], 2) - v[0])*(theta + pow(v[1], 2) + v[1]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) + (1.0/8.0)*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) - v[0]) + theta*(-1.0*theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) - v[0])) + pow(v[1], 2)*(-theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) - v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] - theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) - pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    else if ( l == 26 )
        geq = -0.125*theta*v[2]*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + (1.0/8.0)*theta*(-1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + 1.0*pow(v[2], 2)*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1])) + (1.0/8.0)*pow(v[2], 2)*(-1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) + 1.0*theta*(theta + pow(v[0], 2) + v[0])*(theta + pow(v[1], 2) - v[1]) + theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) + pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) - v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) + (1.0/8.0)*v[2]*(1.0*theta*v[1]*(theta + pow(v[0], 2) + v[0]) - theta*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + 1.0*pow(v[1], 2)*(theta + pow(v[0], 2) + v[0])) - pow(v[1], 2)*(theta*v[0] + 1.0*theta*(theta + pow(v[0], 2) + v[0]) + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2))) + v[1]*(theta*v[0] + theta*(U + 1.0*theta + 1.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + pow(v[0], 2)*(U + 1.0*theta + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)) + v[0]*(U + 0.5*pow(v[0], 2) + 0.5*pow(v[1], 2) + 0.5*pow(v[2], 2)))) ;
    
    return geq*rho;
}

double LBM::calculate_gstr(int l, double geq, double str_heat_flux[], double eq_heat_flux[])
{
    double velocity_set[3] = {cx[l], cy[l], cz[l]};
    double heat_flux_diff[3] = {    str_heat_flux[0] - eq_heat_flux[0],
                                    str_heat_flux[1] - eq_heat_flux[1],
                                    str_heat_flux[2] - eq_heat_flux[2]};
    double gstr = 0.0;
    if(v_sqr(velocity_set[0], velocity_set[1], velocity_set[2]) == 1.0)
        gstr = geq + 0.5*dotproduct_Vec3(velocity_set, heat_flux_diff);
    else
        gstr = geq;
    
    return gstr;
}